name: Terragrunt Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (prod, stage, qa)'
        required: true
        default: 'prod'
      action:
        description: 'Action to perform (apply or destroy)'
        required: true
        default: 'apply'

jobs:
  terragrunt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Install Terragrunt
        run: |
          TG_VERSION=v0.67.16
          wget https://github.com/gruntwork-io/terragrunt/releases/download/${TG_VERSION}/terragrunt_linux_amd64 \
            -O /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt
          terragrunt --version

      - name: Start Minikube
        run: |
          minikube start --driver=docker

      - name: Set KUBECONFIG for Minikube
        run: |
          echo "KUBECONFIG=$(minikube config view --format '{{.KubeConfigPath}}')" >> $GITHUB_ENV
          echo "KUBECONFIG set to Minikube configuration"

      - name: Verify cluster
        run: |
          kubectl get nodes
          kubectl get ns

      - name: Terragrunt ${{ github.event.inputs.action }}
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          cd kubernetes/argocd
          terragrunt ${{ github.event.inputs.action }} -auto-approve

      - name: Show ArgoCD resources
        run: |
          kubectl get ns argocd || true
          kubectl get all -n argocd || true
          kubectl -n argocd get events --sort-by=.lastTimestamp | tail -n 100 || true

      - name: Wait for ArgoCD rollouts
        run: |
          kubectl -n argocd rollout status deploy/argocd-server --timeout=5m
          kubectl -n argocd rollout status deploy/argocd-repo-server --timeout=5m
          kubectl -n argocd rollout status statefulset/argocd-application-controller --timeout=5m

      - name: Port-forward ArgoCD server (UI on localhost:8080)
        run: |
          nohup kubectl -n argocd port-forward svc/argocd-server 8080:80 >/dev/null 2>&1 &
          sleep 10
          echo "ArgoCD UI available at http://localhost:8080"
          echo "Checking ArgoCD health endpoint..."
          if curl -sf http://localhost:8080/healthz | grep -q "OK"; then
            echo "✅ ArgoCD is healthy"
          else
            echo "❌ ArgoCD health check failed"
            exit 1
          fi

      - name: ArgoCD admin password
        run: |
          echo "Initial admin password:"
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d
          echo